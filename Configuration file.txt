BELOW ARE THE CODE OF SPRING CONFIGURATION

package aswin.security.config;

import java.beans.PropertyVetoException;
import java.util.logging.Logger;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;
import org.springframework.core.env.Environment;
import org.springframework.web.servlet.ViewResolver;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.view.InternalResourceViewResolver;

import com.mchange.v2.c3p0.ComboPooledDataSource;

@EnableWebMvc
@ComponentScan(basePackages="aswin.security")
@PropertySource("classpath:persistence-mysql.properties")
public class DemoAppConfig {
	

	// set up variable to hold the properties
	
	@Autowired
	private Environment env;
	
	// set up a logger for diagnostics
	
	private Logger logger = Logger.getLogger(getClass().getName());
	
	
	
	
// define a bean for view resolver//
	
public ViewResolver viewResolver() {
	
InternalResourceViewResolver viewResolver= new InternalResourceViewResolver();

viewResolver.setPrefix("/WEB-INF/view/");
viewResolver.setSuffix(".jsp");

return viewResolver;
}
	


// define a bean for our security datasource

@Bean
public DataSource securityDataSource() {
	
	// create connection pool
	ComboPooledDataSource securityDataSource
								= new ComboPooledDataSource();
			
	// set the jdbc driver class
	
	try {
		securityDataSource.setDriverClass(env.getProperty("jdbc.driver"));
	} catch (PropertyVetoException exc) {
		throw new RuntimeException(exc);
	}
	
	// log the connection props
	//
	// just to make sure we are  reading data from properties file
	
	logger.info(">>> jdbc.url=" + env.getProperty("jdbc.url"));
	logger.info(">>> jdbc.user=" + env.getProperty("jdbc.user"));
	
	
	// set database connection props
	
	securityDataSource.setJdbcUrl(env.getProperty("jdbc.url"));
	securityDataSource.setUser(env.getProperty("jdbc.user"));
	securityDataSource.setPassword(env.getProperty("jdbc.password"));
	
	// set connection pool props
	
	securityDataSource.setInitialPoolSize(
			getIntProperty("connection.pool.initialPoolSize"));

	securityDataSource.setMinPoolSize(
			getIntProperty("connection.pool.minPoolSize"));

	securityDataSource.setMaxPoolSize(
			getIntProperty("connection.pool.maxPoolSize"));

	securityDataSource.setMaxIdleTime(
			getIntProperty("connection.pool.maxIdleTime"));
	
	return securityDataSource;
}

// need a helper method 
// read environment property and convert to int

private int getIntProperty(String propName) {
	
	String propVal = env.getProperty(propName);
	
	// now convert to int
	int intPropVal = Integer.parseInt(propVal);
	
	return intPropVal;
}


}


// BELOW ARE THE CODE OF SPRING SECURITY CONFIGURATION

package aswin.security.config;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.User.UserBuilder;

@Configuration
@EnableWebSecurity
public class DemoSecurityConfig extends WebSecurityConfigureAdapter {
	
	

	// add a reference to our security data source
	
	@Autowired
	private DataSource securityDataSource;
	
	
	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {

		// use jdbc authentication !!!
		
		auth.jdbcAuthentication().dataSource(securityDataSource);
		
	}
	@override
	protected void configure(HttpSecurity http) throws exception {

		http.authorizeRequests()
			.antMatchers("/").hasRole("EMPLOYEE")
			.antMatchers("/leaders/**").hasRole("MANAGER")
			.antMatchers("/systems/**").hasRole("ADMIN")
			.and()
			.formLogin()
				.loginPage("/showMyLoginPage")
				.loginProcessingUrl("/authenticateTheUser")
				.permitAll()
			.and()
			.logout().permitAll()
			.and()
			.exceptionHandling().accessDeniedPage("/access-denied");
		
	}
	
	}		

}





